# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2020-02-10 21:52
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import notebook.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(default=1, help_text='Index of notebook in topic.')),
                ('published', models.BooleanField(default=1, help_text='Untick to not display notebook on page.')),
                ('name', models.CharField(default='Notebook name', help_text='Name of notebook.', max_length=200)),
                ('pub_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date published')),
                ('edit_date', models.DateTimeField(auto_now=True, null=True, verbose_name='date edited')),
                ('body', models.TextField(default='Notebook explanation', help_text='A short explanation of the notebook, max length of         400 signs including white spaces.', max_length=400, verbose_name='explanation')),
                ('file_ipynb', models.FileField(help_text="Rendered using Jupyter's nbviewer.", null=True, storage=notebook.models.OverwriteStorage(), upload_to='notebooks', verbose_name='.ipynb file')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['topic__nb_type', 'topic__index', 'index'],
            },
        ),
        migrations.CreateModel(
            name='NotebookFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, help_text="Files in notebooks has to be included as 'files/file_name'.", storage=notebook.models.OverwriteStorage(), upload_to='notebooks/files')),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='notebook.Notebook')),
            ],
        ),
        migrations.CreateModel(
            name='NotebookImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, help_text="Images in notebooks has to be included as 'images/file_name'.", storage=notebook.models.OverwriteStorage(), upload_to='notebooks/images')),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='notebook.Notebook')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nb_type', models.CharField(choices=[('M', 'Module'), ('E', 'Example')], default='M', max_length=1, verbose_name='notebook type')),
                ('name', models.CharField(default='Basics', help_text='Name of topic.', max_length=50, verbose_name='topic name')),
                ('index', models.IntegerField(default=1, help_text='Index of topic in topic list.')),
            ],
            options={
                'ordering': ['nb_type', 'index'],
            },
        ),
        migrations.AddField(
            model_name='notebook',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notebook.Topic'),
        ),
    ]
